// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Login Screen container should render as expected 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <LoginScreen
    attemptLogin={[Function]}
    error={null}
    fetching={false}
    navigation={
      Object {
        "navigate": [MockFunction],
      }
    }
    success={false}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <PopupDialog
          dialogAnimation={
            SlideAnimation {
              "animate": 0,
              "animations": Object {
                "transform": Array [
                  Object {
                    "translateY": 800,
                  },
                ],
              },
            }
          }
          dialogTitle={
            <DialogTitle
              haveTitleBar={true}
              title="Code d'authentification"
              titleAlign="center"
            />
          }
          height={170}
          width={0.95}
        >
          <View
            style={
              Object {
                "alignItems": "center",
                "flex": 1,
                "justifyContent": "center",
              }
            }
          >
            <Styled(Text)
              style={
                Object {
                  "color": "#555",
                  "fontSize": 20,
                  "textAlign": "center",
                }
              }
              virtual={undefined}
            >
              Comment souhaiter-vous recevoir votre code d'authentification?
            </Styled(Text)>
            <View
              style={
                Object {
                  "flex": 1,
                  "flexDirection": "row",
                }
              }
            >
              <DialogButton
                align="center"
                disabled={false}
                onPress={[Function]}
                text="Par Email"
              />
              <DialogButton
                align="center"
                disabled={false}
                onPress={[Function]}
                text="Par SMS"
              />
            </View>
          </View>
        </PopupDialog>,
        <Styled(Content)
          virtual={undefined}
        >
          <Logo />
          <ReduxForm
            editable={true}
            onRegisterClicked={[Function]}
            onSubmit={[Function]}
          />
        </Styled(Content)>,
      ],
      "style": Object {
        "backgroundColor": "#2c3e50",
      },
      "virtual": undefined,
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <View
            style={
              Object {
                "alignItems": "center",
                "flex": 1,
                "justifyContent": "center",
              }
            }
          >
            <Styled(Text)
              style={
                Object {
                  "color": "#555",
                  "fontSize": 20,
                  "textAlign": "center",
                }
              }
              virtual={undefined}
            >
              Comment souhaiter-vous recevoir votre code d'authentification?
            </Styled(Text)>
            <View
              style={
                Object {
                  "flex": 1,
                  "flexDirection": "row",
                }
              }
            >
              <DialogButton
                align="center"
                disabled={false}
                onPress={[Function]}
                text="Par Email"
              />
              <DialogButton
                align="center"
                disabled={false}
                onPress={[Function]}
                text="Par SMS"
              />
            </View>
          </View>,
          "dialogAnimation": SlideAnimation {
            "animate": 0,
            "animations": Object {
              "transform": Array [
                Object {
                  "translateY": 800,
                },
              ],
            },
          },
          "dialogTitle": <DialogTitle
            haveTitleBar={true}
            title="Code d'authentification"
            titleAlign="center"
          />,
          "height": 170,
          "width": 0.95,
        },
        "ref": [Function],
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <Styled(Text)
                style={
                  Object {
                    "color": "#555",
                    "fontSize": 20,
                    "textAlign": "center",
                  }
                }
                virtual={undefined}
              >
                Comment souhaiter-vous recevoir votre code d'authentification?
              </Styled(Text)>,
              <View
                style={
                  Object {
                    "flex": 1,
                    "flexDirection": "row",
                  }
                }
              >
                <DialogButton
                  align="center"
                  disabled={false}
                  onPress={[Function]}
                  text="Par Email"
                />
                <DialogButton
                  align="center"
                  disabled={false}
                  onPress={[Function]}
                  text="Par SMS"
                />
              </View>,
            ],
            "style": Object {
              "alignItems": "center",
              "flex": 1,
              "justifyContent": "center",
            },
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Comment souhaiter-vous recevoir votre code d'authentification?",
                "style": Object {
                  "color": "#555",
                  "fontSize": 20,
                  "textAlign": "center",
                },
                "virtual": undefined,
              },
              "ref": null,
              "rendered": "Comment souhaiter-vous recevoir votre code d'authentification?",
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": Array [
                  <DialogButton
                    align="center"
                    disabled={false}
                    onPress={[Function]}
                    text="Par Email"
                  />,
                  <DialogButton
                    align="center"
                    disabled={false}
                    onPress={[Function]}
                    text="Par SMS"
                  />,
                ],
                "style": Object {
                  "flex": 1,
                  "flexDirection": "row",
                },
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": "button-1",
                  "nodeType": "function",
                  "props": Object {
                    "align": "center",
                    "disabled": false,
                    "onPress": [Function],
                    "text": "Par Email",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": "button-2",
                  "nodeType": "function",
                  "props": Object {
                    "align": "center",
                    "disabled": false,
                    "onPress": [Function],
                    "text": "Par SMS",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <Logo />,
            <ReduxForm
              editable={true}
              onRegisterClicked={[Function]}
              onSubmit={[Function]}
            />,
            false,
          ],
          "virtual": undefined,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "editable": true,
              "onRegisterClicked": [Function],
              "onSubmit": [Function],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          false,
        ],
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <PopupDialog
            dialogAnimation={
              SlideAnimation {
                "animate": 0,
                "animations": Object {
                  "transform": Array [
                    Object {
                      "translateY": 800,
                    },
                  ],
                },
              }
            }
            dialogTitle={
              <DialogTitle
                haveTitleBar={true}
                title="Code d'authentification"
                titleAlign="center"
              />
            }
            height={170}
            width={0.95}
          >
            <View
              style={
                Object {
                  "alignItems": "center",
                  "flex": 1,
                  "justifyContent": "center",
                }
              }
            >
              <Styled(Text)
                style={
                  Object {
                    "color": "#555",
                    "fontSize": 20,
                    "textAlign": "center",
                  }
                }
                virtual={undefined}
              >
                Comment souhaiter-vous recevoir votre code d'authentification?
              </Styled(Text)>
              <View
                style={
                  Object {
                    "flex": 1,
                    "flexDirection": "row",
                  }
                }
              >
                <DialogButton
                  align="center"
                  disabled={false}
                  onPress={[Function]}
                  text="Par Email"
                />
                <DialogButton
                  align="center"
                  disabled={false}
                  onPress={[Function]}
                  text="Par SMS"
                />
              </View>
            </View>
          </PopupDialog>,
          <Styled(Content)
            virtual={undefined}
          >
            <Logo />
            <ReduxForm
              editable={true}
              onRegisterClicked={[Function]}
              onSubmit={[Function]}
            />
          </Styled(Content)>,
        ],
        "style": Object {
          "backgroundColor": "#2c3e50",
        },
        "virtual": undefined,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <View
              style={
                Object {
                  "alignItems": "center",
                  "flex": 1,
                  "justifyContent": "center",
                }
              }
            >
              <Styled(Text)
                style={
                  Object {
                    "color": "#555",
                    "fontSize": 20,
                    "textAlign": "center",
                  }
                }
                virtual={undefined}
              >
                Comment souhaiter-vous recevoir votre code d'authentification?
              </Styled(Text)>
              <View
                style={
                  Object {
                    "flex": 1,
                    "flexDirection": "row",
                  }
                }
              >
                <DialogButton
                  align="center"
                  disabled={false}
                  onPress={[Function]}
                  text="Par Email"
                />
                <DialogButton
                  align="center"
                  disabled={false}
                  onPress={[Function]}
                  text="Par SMS"
                />
              </View>
            </View>,
            "dialogAnimation": SlideAnimation {
              "animate": 0,
              "animations": Object {
                "transform": Array [
                  Object {
                    "translateY": 800,
                  },
                ],
              },
            },
            "dialogTitle": <DialogTitle
              haveTitleBar={true}
              title="Code d'authentification"
              titleAlign="center"
            />,
            "height": 170,
            "width": 0.95,
          },
          "ref": [Function],
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                <Styled(Text)
                  style={
                    Object {
                      "color": "#555",
                      "fontSize": 20,
                      "textAlign": "center",
                    }
                  }
                  virtual={undefined}
                >
                  Comment souhaiter-vous recevoir votre code d'authentification?
                </Styled(Text)>,
                <View
                  style={
                    Object {
                      "flex": 1,
                      "flexDirection": "row",
                    }
                  }
                >
                  <DialogButton
                    align="center"
                    disabled={false}
                    onPress={[Function]}
                    text="Par Email"
                  />
                  <DialogButton
                    align="center"
                    disabled={false}
                    onPress={[Function]}
                    text="Par SMS"
                  />
                </View>,
              ],
              "style": Object {
                "alignItems": "center",
                "flex": 1,
                "justifyContent": "center",
              },
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "Comment souhaiter-vous recevoir votre code d'authentification?",
                  "style": Object {
                    "color": "#555",
                    "fontSize": 20,
                    "textAlign": "center",
                  },
                  "virtual": undefined,
                },
                "ref": null,
                "rendered": "Comment souhaiter-vous recevoir votre code d'authentification?",
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": Array [
                    <DialogButton
                      align="center"
                      disabled={false}
                      onPress={[Function]}
                      text="Par Email"
                    />,
                    <DialogButton
                      align="center"
                      disabled={false}
                      onPress={[Function]}
                      text="Par SMS"
                    />,
                  ],
                  "style": Object {
                    "flex": 1,
                    "flexDirection": "row",
                  },
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": "button-1",
                    "nodeType": "function",
                    "props": Object {
                      "align": "center",
                      "disabled": false,
                      "onPress": [Function],
                      "text": "Par Email",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": "button-2",
                    "nodeType": "function",
                    "props": Object {
                      "align": "center",
                      "disabled": false,
                      "onPress": [Function],
                      "text": "Par SMS",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                ],
                "type": [Function],
              },
            ],
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <Logo />,
              <ReduxForm
                editable={true}
                onRegisterClicked={[Function]}
                onSubmit={[Function]}
              />,
              false,
            ],
            "virtual": undefined,
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "editable": true,
                "onRegisterClicked": [Function],
                "onSubmit": [Function],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            false,
          ],
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
    "context": Object {
      "store": Object {
        "clearActions": [Function],
        "dispatch": [MockFunction],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
    },
  },
}
`;
